# *-* sh *-*

# set variable identifying the chroot you work in (used in the prompt below)
if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
    debian_chroot=$(cat /etc/debian_chroot)
fi

function __find_git_branch() {
    # Based on: http://stackoverflow.com/a/13003854/170413
    local branch
    if branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
    then
        if [[ "$branch" == "HEAD" ]]
        then
            branch='detached*'
        fi
        echo -n "$branch"
    fi
}

function __find_git_dirty() {
    local status=$(git status --porcelain 2> /dev/null)
    if [[ "$status" != "" ]]; then
        echo -n '*'
    fi
}

function __xterm_set_title() {
    echo -n "\033]0;"
    echo -n "$1"
    echo -n "\007"
}

function __prompt_command() {
    local EXIT="$?"             # This needs to be first

    eval ${TS_HIST_COMMAND}; # save history

    PS1=""

    case "$TERM" in
        linux|xterm-color|rxvt*|xterm|screen)
            local RCol='\[\e[0m\]'

            local Red='\[\e[0;31m\]'
            local Gre='\[\e[0;32m\]'
            local BYel='\[\e[1;33m\]'
            local BBlu='\[\e[1;34m\]'
            local Pur='\[\e[0;35m\]'
            local Cyn='\[\e[0;36m\]'
        ;;
    esac

    if [ ! -z $WINDOW ]
    then
        PS1+="${Pur}${WINDOW}]${RCol}" # include screenname in prompt
    fi

    local GITBRANCH=$(__find_git_branch)
    if [ ! -z "$GITBRANCH" ]
    then
        PS1+="(${Cyn}${GITBRANCH}${RCol}"
        local GITDIRTY=$(__find_git_dirty)
        if [ ! -z "$GITDIRTY" ]
        then
            PS1+="${Red}*${RCol}"
        fi
        PS1+=")"
    fi

    if [ $EXIT != 0 ]; then
        PS1+="${Red}\u${RCol}"      # Add red if exit code non 0
    else
        PS1+="${Gre}\u${RCol}"
    fi

    PS1+="${RCol}@${Gre}\h:${Pur}\w${BYel}\$${RCol} "
}

# set a fancy prompt (non-color, unless we know we "want" color)
export PROMPT_COMMAND=__prompt_command

